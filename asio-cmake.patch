diff --git a/asio/CMakeLists.txt b/asio/CMakeLists.txt
new file mode 100644
index 000000000..6839d82e0
--- /dev/null
+++ b/asio/CMakeLists.txt
@@ -0,0 +1,63 @@
+cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
+
+project(Asio VERSION 1.31.0 LANGUAGES CXX)
+
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+  add_compile_options(-Wall -Wextra -Wpedantic)
+endif()
+
+include_directories(include)
+
+add_definitions(
+ -DASIO_STANDALONE
+ -DASIO_HAS_STD_TYPE_TRAITS
+ -DASIO_HAS_STD_SHARED_PTR
+ -DASIO_HAS_STD_ADDRESSOF
+ -DASIO_HAS_STD_ATOMIC
+ -DASIO_HAS_STD_ARRAY
+ -DASIO_HAS_CXX11_ALLOCATORS
+ -DASIO_HAS_THREADS
+ -DASIO_HAS_CSTDINT
+ -DASIO_SEPARATE_COMPILATION
+)
+
+find_package(OpenSSL REQUIRED)
+include_directories(${OPENSSL_INCLUDE_DIR})
+
+include(GNUInstallDirs)
+
+file(GLOB_RECURSE ALL_HEADERS
+    ${PROJECT_SOURCE_DIR}/include/**/*.h
+    ${PROJECT_SOURCE_DIR}/include/**/*.hpp
+    ${PROJECT_SOURCE_DIR}/src/cpp/**/*.h
+    ${PROJECT_SOURCE_DIR}/src/cpp/**/*.hpp
+)
+
+add_library(Asio STATIC src/asio.cpp src/asio_ssl.cpp ${ALL_HEADERS})
+target_link_libraries(Asio ${OPENSSL_LIBRARIES})
+
+target_include_directories(Asio PUBLIC
+    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include> $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>
+    $<INSTALL_INTERFACE:include/>
+)
+
+install(DIRECTORY "${PROJECT_SOURCE_DIR}/include/"
+        DESTINATION "include/"
+        FILES_MATCHING
+        PATTERN "*.h"
+        PATTERN "*.hpp"
+        PATTERN "*.ipp"
+)
+
+install(TARGETS Asio DESTINATION ${CMAKE_INSTALL_CMAKEDIR}
+        EXPORT AsioConfig DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+)
+install(EXPORT AsioConfig
+        DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/asio"
+        FILE Asio-config.cmake
+)
